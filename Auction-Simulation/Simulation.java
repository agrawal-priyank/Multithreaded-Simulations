/**
 * Class provided for ease of test. This will not be used in the project 
 * evaluation, so feel free to modify it as you like.
 */ 
public class Simulation
{
    public static void main(String[] args)
    {
        int nrSellers = 50;
        int nrBidders = 20;
        
        Thread[] sellerThreads = new Thread[nrSellers];
        Thread[] bidderThreads = new Thread[nrBidders];
        Seller[] sellers = new Seller[nrSellers];
        Bidder[] bidders = new Bidder[nrBidders];
        
        // Start the sellers
        for (int i=0; i<nrSellers; ++i)
        {
            sellers[i] = new Seller(
            		AuctionServer.getInstance(), 
            		"Seller"+i, 
            		100, 50, i
            );
            sellerThreads[i] = new Thread(sellers[i]);
            sellerThreads[i].start();
        }
        
        // Start the buyers
        for (int i=0; i<nrBidders; ++i)
        {
            bidders[i] = new Bidder(
            		AuctionServer.getInstance(), 
            		"Buyer"+i, 
            		1000, 20, 150, i
            );
            bidderThreads[i] = new Thread(bidders[i]);
            bidderThreads[i].start();
        }
        
        // Join on the sellers
        for (int i=0; i<nrSellers; ++i)
        {
            try
            {
                sellerThreads[i].join();
            }
            catch (InterruptedException e)
            {
                e.printStackTrace();
            }
        }

        // Join on the bidders
        for (int i=0; i<nrBidders; ++i)
        {
            try
            {
                sellerThreads[i].join();
            }
            catch (InterruptedException e)
            {
                e.printStackTrace();
            }
        }

        // TODO: Add code as needed to debug
        // Money spent by bidders and revenue generated by the auction server should be the same
        int moneySpent = 0;
        for(int i = 0; i < nrBidders; i++){
            moneySpent += bidders[i].cashSpent();
        }

        int revenue = AuctionServer.getInstance().revenue();
        System.out.println("Money spent by Bidders: " + moneySpent);
        System.out.println("Revenue generated by Auction Server: " + revenue);

        System.out.println("-----------------------------------------");

        // Items available to the bidder should not exceed 80 which is the auction server capacity at any given time
        for(int i = 0; i < nrBidders; i++){
            System.out.println("Bidder Name: " + bidders[i].name() + ", " +
                             "Items Available: " + bidders[i].mostItemsAvailable());
            System.out.println();
        }
    }

}