import java.util.List;

/**
 * Validates a simulation
 */
public class Validate {
    private static class InvalidSimulationException extends Exception {
        public InvalidSimulationException() {
        }
    }

    // Helper method for validating the simulation
    private static void check(boolean check,
                              String message) throws InvalidSimulationException {
        if (!check) {
            System.err.println("SIMULATION INVALID: " + message);
            throw new Validate.InvalidSimulationException();
        }
    }

    /**
     * Validates the given list of events is a valid simulation.
     * Returns true if the simulation is valid, false otherwise.
     *
     * @param events - a list of events generated by the simulation
     *               in the order they were generated.
     * @returns res - whether the simulation was valid or not
     */
    public static boolean validateSimulation(List<SimulationEvent> events) {
        try {
            check(events.get(0).event == SimulationEvent.EventType.SimulationStarting, "Simulation didn't start with initiation event");
            check(events.get(events.size() - 1).event == SimulationEvent.EventType.SimulationEnded, "Simulation didn't end with termination event");

            int burgers = 0;
            int fries = 0;
            int coffees = 0;

            //checking if machine exceeded capacity
            for (SimulationEvent e : events) {
                if (e.event == SimulationEvent.EventType.MachineStartingFood) {
                    String machineName = e.machine.machineName;
                    if (machineName.equals("Grill")) {
                        burgers++;
                    } else if (machineName.equals("Fryer")) {
                        fries++;
                    } else if (machineName.equals("CoffeeMaker")) {
                        coffees++;
                    }
                }
                if (e.event == SimulationEvent.EventType.MachineDoneFood) {
                    String machineName2 = e.machine.machineName;
                    if (machineName2.equals("Grill")) {
                        burgers--;
                    } else if (machineName2.equals("Fryer")) {
                        fries--;
                    } else if (machineName2.equals("CoffeeMaker")) {
                        coffees--;
                    }
                }
                if (burgers > Simulation.machineCapacity) {
                    System.err.println("Burgers crashed:" + burgers);
                    throw new Validate.InvalidSimulationException();
                } else
                    System.out.println("Burgers OK:" + burgers);
                if (fries > Simulation.machineCapacity) {
                    System.err.println("Fries crashed:" + fries);
                    throw new Validate.InvalidSimulationException();
                } else
                    System.out.println("Fries OK:" + fries);
                if (coffees > Simulation.machineCapacity) {
                    System.err.println("Coffees crashed:" + coffees);
                    throw new Validate.InvalidSimulationException();
                } else
                    System.out.println("Coffees OK:" + coffees);
            }
            int custCount = Simulation.customersWithOrders.size();
            if (custCount != 0)
                System.out.println("Validation failed: All customers did not receive their orders!");
            else
                System.out.println("Validation success: All customers received their orders successfully!");

            return true;
        } catch (InvalidSimulationException e) {
            return false;
        }
    }
}